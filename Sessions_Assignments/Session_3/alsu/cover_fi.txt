QuestaSim-64 vcover 2021.1 Coverage Utility 2021.01 Jan 19 2021
Start time: 09:33:19 on Apr 22,2025
vcover report Alus.ucdb -details -annotate -all 
Coverage Report by instance with details

=================================================================================
=== Instance: /\ALSU_tb#al 
=== Design Unit: work.ALSU
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        32        31         1    96.87%

================================Branch Details================================

Branch Coverage for instance /\ALSU_tb#al 

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU.v
------------------------------------IF Branch------------------------------------
    26                                     32429     Count coming in to IF
    26              1                        863       if(rst) begin
    37              1                      31566       end else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    53                                     32430     Count coming in to IF
    53              1                        864       if(rst) begin
    55              1                      31566       end else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    56                                     31566     Count coming in to IF
    56              1                       7632           if (invalid)
    58              1                      23934           else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    65                                     32419     Count coming in to IF
    65              1                        856       if(rst) begin
    68              1                      31563       else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    69                                     31563     Count coming in to IF
    69              1                         13         if (bypass_A_reg && bypass_B_reg)
    71              1                        366         else if (bypass_A_reg)
    73              1                        328         else if (bypass_B_reg)
    75              1                       7478         else if (invalid) 
    77              1                      23378         else begin
Branch totals: 5 hits of 5 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    78                                     23378     Count coming in to CASE
    79              1                       7667               3'h0: begin 
    89              1                       3353               3'h1: begin
    99              1                       1523               3'h2: begin
    107             1                       1547               3'h3: out <= A_reg * B_reg;
    108             1                       4694               3'h4: begin
    114             1                       4594               3'h5: begin
                                         ***0***     All False Count
Branch totals: 6 hits of 7 branches = 85.71%

------------------------------------IF Branch------------------------------------
    80                                      7667     Count coming in to IF
    80              1                        445                 if (red_op_A_reg && red_op_B_reg)
    82              1                        352                 else if (red_op_A_reg) 
    84              1                        338                 else if (red_op_B_reg)
    86              1                       6532                 else 
Branch totals: 4 hits of 4 branches = 100.00%

------------------------------------IF Branch------------------------------------
    90                                      3353     Count coming in to IF
    90              1                        505                 if (red_op_A_reg && red_op_B_reg)
    92              1                        338                 else if (red_op_A_reg) 
    94              1                        352                 else if (red_op_B_reg)
    96              1                       2158                 else 
Branch totals: 4 hits of 4 branches = 100.00%

------------------------------------IF Branch------------------------------------
    109                                     4694     Count coming in to IF
    109             1                       1352                 if (direction_reg)
    111             1                       3342                 else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    115                                     4594     Count coming in to IF
    115             1                       1348                 if (direction_reg)
    117             1                       3246                 else
Branch totals: 2 hits of 2 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       6         6         0   100.00%

================================Condition Details================================

Condition Coverage for instance /\ALSU_tb#al  --

  File ALSU.v
----------------Focused Condition View-------------------
Line       69 Item    1  (bypass_A_reg && bypass_B_reg)
Condition totals: 2 of 2 input terms covered = 100.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  bypass_A_reg         Y
  bypass_B_reg         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  bypass_A_reg_0        -                             
  Row   2:          1  bypass_A_reg_1        bypass_B_reg                  
  Row   3:          1  bypass_B_reg_0        bypass_A_reg                  
  Row   4:          1  bypass_B_reg_1        bypass_A_reg                  

----------------Focused Condition View-------------------
Line       80 Item    1  (red_op_A_reg && red_op_B_reg)
Condition totals: 2 of 2 input terms covered = 100.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  red_op_A_reg         Y
  red_op_B_reg         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  red_op_A_reg_0        -                             
  Row   2:          1  red_op_A_reg_1        red_op_B_reg                  
  Row   3:          1  red_op_B_reg_0        red_op_A_reg                  
  Row   4:          1  red_op_B_reg_1        red_op_A_reg                  

----------------Focused Condition View-------------------
Line       90 Item    1  (red_op_A_reg && red_op_B_reg)
Condition totals: 2 of 2 input terms covered = 100.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  red_op_A_reg         Y
  red_op_B_reg         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  red_op_A_reg_0        -                             
  Row   2:          1  red_op_A_reg_1        red_op_B_reg                  
  Row   3:          1  red_op_B_reg_0        red_op_A_reg                  
  Row   4:          1  red_op_B_reg_1        red_op_A_reg                  


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      8         7         1    87.50%

================================Expression Details================================

Expression Coverage for instance /\ALSU_tb#al  --

  File ALSU.v
----------------Focused Expression View-----------------
Line       20 Item    1  ((red_op_A_reg | red_op_B_reg) & (opcode_reg[1] | opcode_reg[2]))
Expression totals: 3 of 4 input terms covered = 75.00%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
   red_op_A_reg         N  '_1' not hit             Hit '_1'
   red_op_B_reg         Y
  opcode_reg[1]         Y
  opcode_reg[2]         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  red_op_A_reg_0        ((opcode_reg[1] | opcode_reg[2]) && ~red_op_B_reg)
  Row   2:    ***0***  red_op_A_reg_1        ((opcode_reg[1] | opcode_reg[2]) && ~red_op_B_reg)
  Row   3:          1  red_op_B_reg_0        ((opcode_reg[1] | opcode_reg[2]) && ~red_op_A_reg)
  Row   4:          1  red_op_B_reg_1        ((opcode_reg[1] | opcode_reg[2]) && ~red_op_A_reg)
  Row   5:          1  opcode_reg[1]_0       ((red_op_A_reg | red_op_B_reg) && ~opcode_reg[2])
  Row   6:          1  opcode_reg[1]_1       ((red_op_A_reg | red_op_B_reg) && ~opcode_reg[2])
  Row   7:          1  opcode_reg[2]_0       ((red_op_A_reg | red_op_B_reg) && ~opcode_reg[1])
  Row   8:          1  opcode_reg[2]_1       ((red_op_A_reg | red_op_B_reg) && ~opcode_reg[1])

----------------Focused Expression View-----------------
Line       21 Item    1  (opcode_reg[1] & opcode_reg[2])
Expression totals: 2 of 2 input terms covered = 100.00%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
  opcode_reg[1]         Y
  opcode_reg[2]         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  opcode_reg[1]_0       opcode_reg[2]                 
  Row   2:          1  opcode_reg[1]_1       opcode_reg[2]                 
  Row   3:          1  opcode_reg[2]_0       opcode_reg[1]                 
  Row   4:          1  opcode_reg[2]_1       opcode_reg[1]                 

----------------Focused Expression View-----------------
Line       22 Item    1  (invalid_red_op | invalid_opcode)
Expression totals: 2 of 2 input terms covered = 100.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  invalid_red_op         Y
  invalid_opcode         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  invalid_red_op_0      ~invalid_opcode               
  Row   2:          1  invalid_red_op_1      ~invalid_opcode               
  Row   3:          1  invalid_opcode_0      ~invalid_red_op               
  Row   4:          1  invalid_opcode_1      ~invalid_red_op               


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      48        48         0   100.00%

================================Statement Details================================

Statement Coverage for instance /\ALSU_tb#al  --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU.v
    3                                                module ALSU(A, B, cin, serial_in, red_op_A, red_op_B, opcode, bypass_A, bypass_B, clk, rst, direction, leds, out);
    4                                                parameter INPUT_PRIORITY = "A";
    5                                                parameter FULL_ADDER = "ON";
    6                                                input clk, cin, rst, red_op_A, red_op_B, bypass_A, bypass_B, direction, serial_in;
    7                                                input [2:0] opcode;
    8                                                input signed [2:0] A, B;
    9                                                output reg [15:0] leds;
    10                                               output reg signed [5:0] out;
    11                                               
    12                                               reg red_op_A_reg, red_op_B_reg, bypass_A_reg, bypass_B_reg, direction_reg, serial_in_reg;
    13                                               reg signed [1:0] cin_reg;
    14                                               reg [2:0] opcode_reg;
    15                                               reg signed [2:0] A_reg, B_reg;
    16                                               
    17                                               wire invalid_red_op, invalid_opcode, invalid;
    18                                               
    19                                               //Invalid handling
    20              1                      26133     assign invalid_red_op = (red_op_A_reg | red_op_B_reg) & (opcode_reg[1] | opcode_reg[2]);
    21              1                      24893     assign invalid_opcode = opcode_reg[1] & opcode_reg[2];
    22              1                      10448     assign invalid = invalid_red_op | invalid_opcode;
    23                                               
    24                                               //Registering input signals
    25              1                      32429     always @(posedge clk or posedge rst) begin
    26                                                 if(rst) begin
    27              1                        863          cin_reg <= 0;
    28              1                        863          red_op_B_reg <= 0;
    29              1                        863          red_op_A_reg <= 0;
    30              1                        863          bypass_B_reg <= 0;
    31              1                        863          bypass_A_reg <= 0;
    32              1                        863          direction_reg <= 0;
    33              1                        863          serial_in_reg <= 0;
    34              1                        863          opcode_reg <= 0;
    35              1                        863          A_reg <= 0;
    36              1                        863          B_reg <= 0;
    37                                                 end else begin
    38              1                      31566          cin_reg <= cin;
    39              1                      31566          red_op_B_reg <= red_op_B;
    40              1                      31566          red_op_A_reg <= red_op_A;
    41              1                      31566          bypass_B_reg <= bypass_B;
    42              1                      31566          bypass_A_reg <= bypass_A;
    43              1                      31566          direction_reg <= direction;
    44              1                      31566          serial_in_reg <= serial_in;
    45              1                      31566          opcode_reg <= opcode;
    46              1                      31566          A_reg <= A;
    47              1                      31566          B_reg <= B;
    48                                                 end
    49                                               end
    50                                               
    51                                               //leds output blinking 
    52              1                      32430     always @(posedge clk or posedge rst) begin
    53                                                 if(rst) begin
    54              1                        864          leds <= 0;
    55                                                 end else begin
    56                                                     if (invalid)
    57              1                       7632             leds <= ~leds;
    58                                                     else
    59              1                      23934             leds <= 0;
    60                                                 end
    61                                               end
    62                                               
    63                                               //ALSU output processing
    64              1                      32419     always @(posedge clk or posedge rst) begin
    65                                                 if(rst) begin
    66              1                        856         out <= 0;
    67                                                 end
    68                                                 else begin
    69                                                   if (bypass_A_reg && bypass_B_reg)
    70              1                         13           out <= (INPUT_PRIORITY == "A")? A_reg: B_reg;
    71                                                   else if (bypass_A_reg)
    72              1                        366           out <= A_reg;
    73                                                   else if (bypass_B_reg)
    74              1                        328           out <= B_reg;
    75                                                   else if (invalid) 
    76              1                       7478             out <= 0;
    77                                                   else begin
    78                                                       case (opcode_reg)
    79                                                         3'h0: begin 
    80                                                           if (red_op_A_reg && red_op_B_reg)
    81              1                        445                   out <= (INPUT_PRIORITY == "A")? |A_reg: |B_reg;
    82                                                           else if (red_op_A_reg) 
    83              1                        352                   out <= |A_reg;
    84                                                           else if (red_op_B_reg)
    85              1                        338                   out <= |B_reg;
    86                                                           else 
    87              1                       6532                   out <= A_reg | B_reg;
    88                                                         end
    89                                                         3'h1: begin
    90                                                           if (red_op_A_reg && red_op_B_reg)
    91              1                        505                   out <= (INPUT_PRIORITY == "A")? ^A_reg: ^B_reg;
    92                                                           else if (red_op_A_reg) 
    93              1                        338                   out <= ^A_reg;
    94                                                           else if (red_op_B_reg)
    95              1                        352                   out <= ^B_reg;
    96                                                           else 
    97              1                       2158                   out <= A_reg ^ B_reg;
    98                                                         end
    99                                                         3'h2: begin
    100                                                          if(FULL_ADDER == "ON")begin
    101             1                       1523                   out <= A_reg + B_reg + cin_reg;
    102                                                          end
    103                                                          else begin
    104                                                            out <= A_reg + B_reg;
    105                                                          end
    106                                                        end
    107             1                       1547               3'h3: out <= A_reg * B_reg;
    108                                                        3'h4: begin
    109                                                          if (direction_reg)
    110             1                       1352                   out <= {out[4:0], serial_in_reg};
    111                                                          else
    112             1                       3342                   out <= {serial_in_reg, out[5:1]};
    113                                                        end
    114                                                        3'h5: begin
    115                                                          if (direction_reg)
    116             1                       1348                   out <= {out[4:0], out[5]};
    117                                                          else
    118             1                       3246                   out <= {out[0], out[5:1]};

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        120       118         2    98.33%

================================Toggle Details================================

Toggle Coverage for instance /\ALSU_tb#al  --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                            A[0-2]           1           1                              100.00 
                                        A_reg[2-0]           1           1                              100.00 
                                            B[0-2]           1           1                              100.00 
                                        B_reg[2-0]           1           1                              100.00 
                                          bypass_A           1           1                              100.00 
                                      bypass_A_reg           1           1                              100.00 
                                          bypass_B           1           1                              100.00 
                                      bypass_B_reg           1           1                              100.00 
                                               cin           1           1                              100.00 
                                        cin_reg[1]           0           0                                0.00 
                                        cin_reg[0]           1           1                              100.00 
                                               clk           1           1                              100.00 
                                         direction           1           1                              100.00 
                                     direction_reg           1           1                              100.00 
                                           invalid           1           1                              100.00 
                                    invalid_opcode           1           1                              100.00 
                                    invalid_red_op           1           1                              100.00 
                                        leds[15-0]           1           1                              100.00 
                                       opcode[0-2]           1           1                              100.00 
                                   opcode_reg[2-0]           1           1                              100.00 
                                          out[5-0]           1           1                              100.00 
                                          red_op_A           1           1                              100.00 
                                      red_op_A_reg           1           1                              100.00 
                                          red_op_B           1           1                              100.00 
                                      red_op_B_reg           1           1                              100.00 
                                               rst           1           1                              100.00 
                                         serial_in           1           1                              100.00 
                                     serial_in_reg           1           1                              100.00 

Total Node Count     =         60 
Toggled Node Count   =         59 
Untoggled Node Count =          1 

Toggle Coverage      =      98.33% (118 of 120 bins)


Total Coverage By Instance (filtered view): 96.54%

End time: 09:33:19 on Apr 22,2025, Elapsed time: 0:00:00
Errors: 0, Warnings: 0
